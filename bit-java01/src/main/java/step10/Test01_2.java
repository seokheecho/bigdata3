/* 인스턴스 멤버 : 인스턴스 블록
 * => 스태틱 블록
 *    - 클래스가 로딩될 때 실행하는 블록이다.
 *    - 클래스 로딩 절차
 *      1) .class 파일을 찾는다
 *      2) .class 파일의 유효성 검사한다.
 *      3) .class 파일을 읽어 Method Area에 로딩한다.
 *      4) 클래스 변수 선언이 있다면 Method Area에 생성한다.
 *      5) 스태틱 블록이 있다면 실행한다. 여러 개 있다면 선언된 순서대로 모두 실행한다.
 *      
 * => 인스턴스 블록
 *    - new 명령을 통해 인스턴스를 생성한 후 실행하는 블록이다.
 *      즉 인스턴스를 생성할 때 마다 실행된다.
 *    - 그래서 이 블록에 인스턴스 변수를 초기화시키는 명령을 작성한다. 
 *      또는 인스턴스 메서드가 작업하는데 필요한 도구를 준비시키는 명령을 작성한다.
 *    - 인스턴스 생성 절차
 *      1) 클래스가 로딩되지 않았다면 클래스를 먼저 로딩한다.
 *      2) static이 붙지 않은 인스턴스 변수 선언에 따라 Heap에 메모리를 생성한다.
 *      3) 인스턴스 블록이 있다면 실행한다. 여러 개 있다면 선언된 순서대로 모두 실행한다.
 *      4) 생성자를 실행한다. 
 *    - 생성자도 인스턴스 블록과 마찬가지로 인스턴스를 생성한 후에 호출되기 때문에
 *      개발자들은 인스턴스 블록 보다 생성자를 주로 사용한다.
 *    - 그러나 생성자를 만들 수 없는 클래스인 경우에는 인스턴스 블록을 사용할 수 밖에 없다.
 *      엥? 생성자를 만들 수 없는 클래스가 있는가? 익명 클래스!  
 */
package step10;

class MyClass2 {
  String name;
  int age;
  
  { // 인스턴스 블록
    System.out.println("인스턴스 블록1");
  }
  
  { // 인스턴스 블록
    System.out.println("인스턴스 블록2");
  }
  
  { // 인스턴스 블록
    System.out.println("인스턴스 블록3");
  }
  
}

public class Test01_2 {
  public static void main(String[] args) {
    // 인스턴스를 생성하면 무조건 인스턴스 블록이 실행된다.
    new MyClass2();
    new MyClass2();
    new MyClass2();
    
  }
}










