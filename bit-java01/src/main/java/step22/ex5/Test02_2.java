/* 예외 처리 문법: throw 명령 사용법 - 시스템 예외
 * => 예외의 종류
 *    - 자바에서 예외는 크게 두 종류로 다룬다.
 *    - JVM에서 발생하는 시스템 예외와 개발자가 작성한 코드에서 발생하는 애플리케이션 예외로 나눈다.
 *    - 이런 두 종류의 예외를 표현하기 위해 Java에서는 Throwable 클래스의 자식 클래스로 
 *      두 개의 클래스를 두고 있다. Error와 Exception이다.  
 * => 시스템 예외
 *    - Throwable의 두 개의 자식 클래스 중에서 Error 계열의 예외를 말한다.
 *    - 개발자가 다룰 수 없는 JVM 예외를 표현할 때 사용한다.
 *    - 예를 들어 JVM을 실행하는 중에 메모리가 부족하여 발생하는 예외,
 *      메서드를 호출하다가 스택 메모리가 부족하여 발생하는 예외가 대표적이다.
 *      예) OutOfMemoryError, StackOverflowError 등
 *    - 이런 예외에 대해서 개발자가 할 수 있는 일은
 *      1) 현재까지 작업한 내용을 즉시 외부 저장장치에 저장하고,
 *      2) 사용자에게 적절히 안내 메시지를 출력한 후
 *      JVM을 종료하는 일이다.
 *    - 예외 문법의 존재 이유인 "예외가 발생하더라도 적절한 조치를 취한 후 계속 실행하게 하는 문법"의 대상이 아니다. 
 *    - 개발자가 할 일은 없다! 즉 적절한 조치 후 계속 실행하려고 하지 말라!
 */
package step22.ex5;

public class Test02_2 {

  static void m1() throws Error {
    throw new Error("시스템 예외 발생"); 
  }
  
  public static void main(String[] args) {
    try {
      m1();
    } catch (Error e) { 
      // 현재까지 작업한 내용을 즉시 저장하고, 
      // 간단히 사용자에게 안내 메시지를 출력한 후 종료한다.
      System.out.println("애플리케이션 실행 중 치명적인 오류가 발생했습니다.");
      System.out.println("애플리케이션을 다시 실행하세요!");
      System.out.println("그래도 문제가 계속 된다면 시스템 관리자에게 문의하세요!");
      
      // 시스템 종료! 시스템 예외가 발생하면 더이상 프로그램을 실행해서는 안된다.
      System.exit(0);
    }
    
    // 또 다른 작업
    System.out.println("또 다른 작업을 한다.");
  }

}










