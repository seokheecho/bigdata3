/* 예외 처리 문법
 * => 예외 상황이 발생했을 때 호출자에게 알리는 특별한 문법.
 * => 예외 상황이 발생했을 때 예외를 식별하는 틀별한 문법
 * => 이점
 *    1) 본래의 작업 코드와 예외 처리 코드가 뒤섞여 있지 않아서 코드의 가독성을 높힌다.
 *    2) 호출자에게 예외 상황을 알리기 위해 리턴 값을 사용하는 것 보다 다른 경로를 통해
 *       더 안전하고 확실하게 예외 상황을 호출자에게 전달할 수 있다.
 *    3) 예외를 처리하지 않으면 JVM은 즉시 실행을 멈춘다.
 *       예외 문법은 바로 이런 상황을 막기 위함이다.
 *       즉 예외 상황이 발생하더라도 프로그램을 멈추지 않고 계속 실행할 수 있게 보장해주는 문법이다.
 */
package step22.ex5;

public class Test01_1 {

  public static void main(String[] args) {
    // 예외 처리를 하지 않는다면, 예외 상황을 만났을 때 즉시 실행을 멈춘다.
    int[] values = new int[5];
    
    // 다음과 같이 배열의 크기를 초과하는 예외 상황이 발생하면 
    // JVM은 즉시 실행을 멈춘다.
    // 상상해보자!
    // => 여러분이 게시판을 글을 올릴 때 파일을 함께 업로드 한다고 가정하자.
    // => 하필이면 서버의 하드 디스크 공간이 3GB가 남았다고 가정하자.
    // => 여러분이 올리는 파일은 동영상 파일로 4GB라고 가정하자.
    // 
    // 업로드 하다가 하드디스크가 꽉차는 예외가 발생할 것이고, 그 때 어떻게 해야 하는가?
    // 게시판을 실행하는 웹 서버를 멈춰야 하는가?
    // 여러분이 관리하는 서비스의 사용자가 1000만명이라면,
    // 서비스를 멈추는 순간 1000만명이 게시판을 이용할 수 없을 것이다.
    // 이런 식으로 서비스를 운영한다면 조만간 회사가 망할 것이다.
    // "예외가 발생해도 서비스는 멈추지 않아야 한다."  
    //try {
      for (int i = 0; i < 10; i++) {
        values[i] = 100;
      }
    //} catch (Exception e) {
    //  System.out.println("예외 발생!");
    //}
    
    for (int value : values) {
      System.out.println(value);
    }
  }

}










