/* 가비지(garbage)와 가비지 컬렉터(gargage collector)
 */
package step03;

public class Test02_3 {
  public static void main(String[] args) {
    int[] arr1 = new int[3];
    int[] arr2 = new int[3];
    
    arr1 = arr2;
    /*
     * => arr2에 저장된 주소를 arr1에 넣는 순간,
     *    arr1에 있던 배열 주소를 잃어버리게 된다.
     *    주소를 모르면 그 메모리를 사용할 수 없다.
     *    언제까지? JVM을 종료할 때까지!
     *    이렇게 주소를 가지고 있는 레퍼런스가 없어서 사용되지 못하는 메모리를 "가비지(garbage)"라고 부른다.
     *    프로그래밍 언어학에서는 "dangling object"라고 부른다.
     *    
     * => JVM이 종료될 때까지 사용하지 못한다면 너무 비효율적일 것이다.
     *    그래서 JVM은 이런 쓰레기 메모리를 재사용할 수 있도록 
     *    "가비지 컬렉터"라는 것을 운영한다.
     *    "가비지 컬렉터"는 주소를 잃어버린 메모리를 찾아 다른 용도로 사용할 수 있도록 잠금을 해제시킨다.
     * 
     * => 가비지 컬렉터는 언제 수행하는가?
     *    - 가비지 생겼다고 바로 처리되는 것은 아니다. 다음의 상황에서 쓰레기를 청소한다.
     *    1) 메모리를 사용하고 싶은데, 메모리가 부족할 때!
     *       메모리가 부족할 때 마다 무조건 OS(운영체제)에게 달라고 한다면, 
     *       그것 자체가 비효율적일 것이다.
     *       그래서 OS에게 달라고 하기 전에 일단 내부에서 사용되지 못하고 버려진 메모리를
     *       잠금해제하여 사용하는 것을 원칙으로 한다.
     *    2) CPU가 한가할 때 가비지를 청소한다.
     *       그런데 간단히 프로그램을 실행하고 종료하는 경우 이런 작업이 수행되지 않는다.
     *       보통 24시간 365일 내내 실행하는 프로그램인 경우에 이런 작업이 수행될 것이다.
     */
    
  }
}

















